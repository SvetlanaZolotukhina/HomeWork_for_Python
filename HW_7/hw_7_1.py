# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который
# должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
#
# 31    32         3    5    32        3    5    8    3
# 37    43         2    4    6         8    3    7    1
# 51    86        -1   64   -8
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.

class Matrica:

    def __init__(self, list_1):
        self.list_1 = list_1

    def __str__(self):
        n = ""
        for i in range(len(self.list_1)):
            for j in range(len(self.list_1[i])):
                n += f'{self.list_1[i][j]} '
            n += "\n"
        return n

    def __add__(self, other):
        list_1 = [[self.list_1[i][j] + other.list_1[i][j] for j in range(len(self.list_1[i]))]
                  for i in range(len(self.list_1))]
        return Matrica(list_1)

#взяла матрицу 3*3, заданную пользователем, можно случайно создавать с пом. rendint, но думаю алгоритм можно
# использовать этот в обоих случаях
first_matrix = Matrica([[43, 24, 59],
                  [33, 19, 15],
                  [9, 11, 4]])
second_matrix = Matrica([[26, 16, 48],
                  [91, 77, 3],
                  [18, 43, 34]])
print(first_matrix.__str__())
print(second_matrix.__str__())
print(first_matrix + second_matrix)
